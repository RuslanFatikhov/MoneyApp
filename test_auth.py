#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.auth.models import create_user, verify_user
from app.auth.validators import is_valid_email, is_valid_password

def test_validators():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã...")
    
    # –¢–µ—Å—Ç email
    assert is_valid_email("test@example.com") == True
    assert is_valid_email("invalid-email") == False
    assert is_valid_email("@example.com") == False
    print("‚úÖ Email –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –ø–∞—Ä–æ–ª—è
    valid, msg = is_valid_password("password123")
    assert valid == True
    
    valid, msg = is_valid_password("123")
    assert valid == False
    assert "8 —Å–∏–º–≤–æ–ª–æ–≤" in msg
    
    valid, msg = is_valid_password("password")
    assert valid == False
    assert "—Ü–∏—Ñ—Ä—ã" in msg
    
    valid, msg = is_valid_password("12345678")
    assert valid == False
    assert "–±—É–∫–≤—ã" in msg
    
    print("‚úÖ –ü–∞—Ä–æ–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")

def test_auth_flow():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists('database/finance.db'):
        from init_db import init_database
        init_database()
    
    test_email = "test@example.com"
    test_password = "testpass123"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    success, result = create_user(test_email, test_password)
    if success:
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        user_id = result
    else:
        if "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in result:
            print("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result}")
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞
    success, result = verify_user(test_email, test_password)
    if success:
        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {result}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    success, result = verify_user(test_email, "wrongpass")
    if not success:
        print("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!")
        return

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 40)
    
    try:
        test_validators()
        test_auth_flow()
        print("=" * 40)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()