#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞–º–∏
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_json_files():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º banks.json
    banks_file = 'static/data/banks.json'
    if os.path.exists(banks_file):
        with open(banks_file, 'r', encoding='utf-8') as f:
            banks_data = json.load(f)
            assert 'banks' in banks_data
            assert len(banks_data['banks']) > 0
            print("‚úÖ banks.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print("‚ùå banks.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º currencies.json
    currencies_file = 'static/data/currencies.json'
    if os.path.exists(currencies_file):
        with open(currencies_file, 'r', encoding='utf-8') as f:
            currencies_data = json.load(f)
            assert 'currencies' in currencies_data
            assert len(currencies_data['currencies']) > 0
            print("‚úÖ currencies.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print("‚ùå currencies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_accounts_models():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å—á–µ—Ç–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists('database/finance.db'):
        from init_db import init_database
        init_database()
    
    try:
        from app.accounts.models import (
            create_account, get_user_accounts, get_account_by_id,
            update_account, archive_account, restore_account
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        from app.auth.models import create_user
        
        test_email = "test_accounts@example.com"
        test_password = "testpass123"
        
        success, user_result = create_user(test_email, test_password)
        if success:
            user_id = user_result
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID {user_id}")
        else:
            if "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in user_result:
                # –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from app.auth.models import verify_user
                success, user_id = verify_user(test_email, test_password)
                if success:
                    print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID {user_id}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_result}")
                    return
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_result}")
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç
        success, account_result = create_account(
            user_id=user_id,
            name="–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç Kaspi",
            account_type="checking",
            currency="KZT",
            bank_id="kaspi",
            initial_balance=100000.0
        )
        
        if success:
            account_id = int(account_result)
            print(f"‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ID {account_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
            accounts = get_user_accounts(user_id)
            if accounts:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(accounts)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—á–µ—Ç
                account = get_account_by_id(account_id, user_id)
                if account:
                    print(f"‚úÖ –°—á–µ—Ç –Ω–∞–π–¥–µ–Ω: {account['name']}")
                    print(f"   –ë–∞–ª–∞–Ω—Å: {account['current_balance']} {account['currency']}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
                    success, update_result = update_account(
                        account_id, user_id, name="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç Kaspi"
                    )
                    if success:
                        print("‚úÖ –°—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
                        
                        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—á–µ—Ç
                        success, archive_result = archive_account(account_id, user_id)
                        if success:
                            print("‚úÖ –°—á–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
                            
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç
                            success, restore_result = restore_account(account_id, user_id)
                            if success:
                                print("‚úÖ –°—á–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {restore_result}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {archive_result}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_result}")
                else:
                    print("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –°—á–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {account_result}")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

def test_file_structure():
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'app/accounts/__init__.py',
        'app/accounts/models.py',
        'app/accounts/routes.py',
        'templates/create_account.html',
        'templates/accounts.html',
        'static/js/create_account.js',
        'static/js/accounts.js'
    ]
    
    all_good = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_good = False
    
    return all_good

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è —Å—á–µ—Ç–æ–≤")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs('static/data', exist_ok=True)
        os.makedirs('app/accounts', exist_ok=True)
        
        test_json_files()
        print()
        
        if test_file_structure():
            print()
            test_accounts_models()
        
        print("=" * 50)
        print("üéâ –¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è —Å—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python run.py")
        print("üåê –ò –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞: http://localhost:5002")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()